# Heavily inspired (i.e. copy/paste) from https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:
  pull_request:
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Ubuntu-latest GCC",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
          }
#        - {
#            name: "Ubuntu-latest Clang",
#            os: ubuntu-latest,
#            build_type: "Debug",
#            cc: "clang",
#            cxx: "clang++"
#          }
        - {
            name: "Windows MinGW",
            os: windows-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++"
          }
        - {
            name: "macOS Clang",
            os: macos-latest,
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++"
          }
        - {
            name: "FreeBSD",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu-latest')
        run: |
          sudo apt-get update
          sudo apt-get install build-essential g++ clang git cmake ninja-build libcurl4 libcurl4-openssl-dev openssl libssl-dev
          uname -a
          lsb_release -a
          gcc -v && g++ -v
          clang -v && clang++ -v
          cmake --version && ninja --version

      - name: Install dependencies on macOS
        if: startsWith(matrix.config.name, 'macOS Clang')
        run: |
          brew install ninja
          brew install openssl@3
          brew install curl
          clang -v
          cmake --version
          ninja --version

#      - name: Install ninja on Windows
#        if: startsWith(matrix.config.name, 'Windows MinGW')
#        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install dependencies on Windows
        if: startsWith(matrix.config.name, 'Windows MinGW')
        shell: powershell
        run: |
            choco install -y --no-progress ninja
            choco install -y --no-progress curl
            choco install -y --no-progress openssl

      - name: Install dependencies, make and run on FreeBSD
        if: contains(matrix.config.name, 'FreeBSD')
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          prepare: pkg install -y ninja cmake llvm curl openssl
          run: |
            freebsd-version
            uname -mrs
            pwd
            cmake -G Ninja -DCURL_EX=ON -DOPENSSL_EX=ON -S . -B build
            cmake --build build
            sh ./helpers/exunix.sh

      - name: Configure CMake and Build with Clang on Linux
        if: contains(matrix.config.name, 'Ubuntu-latest Clang')
        run: |
          export CC=clang
          export CXX=clang++
          cmake -G Ninja -DCURL_EX=ON -DOPENSSL_EX=ON -S . -B build
          cmake --build build

      - name: Configure CMake and Build with Clang on MacOS
        if: contains(matrix.config.name, 'macOS')
        run: |
          cmake -G Ninja -DCURL_EX=ON -DOPENSSL_EX=ON -S . -B build
          cmake --build build

      - name: Configure CMake and Build with GCC on Linux
        if: contains(matrix.config.name, 'GCC')
        run: |
          export CC=gcc
          export CXX=g++
          cmake -G Ninja -DCURL_EX=ON -DOPENSSL_EX=ON -S . -B build
          cmake --build build

      - name: Configure CMake and Build with GCC on Windows
        if: startsWith(matrix.config.name, 'Windows MinGW')
        shell: powershell
        run: . "helpers/buildwingithub.ps1"

      - name: Run some examples on Windows
        if: startsWith(matrix.config.name, 'Windows MinGW')
        shell: powershell
        run: . "helpers/exwingithub.ps1"
          
      - name: Run some examples on Linux, MacOS and Unix
        if: contains(matrix.config.name, 'GCC')
        run: |
          sh ./helpers/exunix.sh
          sh ./helpers/exlinux.sh

      - name: Run some examples on Linux, MacOS and Unix
        if: contains(matrix.config.name, 'Clang')
        run: |
          sh ./helpers/exunix.sh
